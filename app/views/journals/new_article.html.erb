<html>
	<body class = "body1">
	<%= render :partial => '/layouts/header'%>
		<div class="div1">

<form name="articleForm" id="formContentPrice" method="post" action="/AdminTool/articleSave.do" accept-charset="UTF-8" onsubmit="return validateArticleForm(this);">
	<table width="860" border="0" cellspacing="0" cellpadding="0">
		<tr><td>
		<table width="860" border="0" cellspacing="0" cellpadding="0">
			<tr>
				<td class="page_head">
					Article Details
				</td>
			</tr>
			<tr>
				<td>&nbsp;
					
				</td>
			</tr>
			
			
			<tr>
				<td colspan="2" align="left"><span><font color="#FF0000">&nbsp;</font></span>
          
				</td>
				
			</tr>
			<tr>
				<td align="left">
					<table cellSpacing="0" cellPadding="10" border="0">
						<tbody>
							<tr>
								
								
								<td height="25" align="left">
									Publisher<span class="mandtory">*</span>
								</td>
								<td height="25" align="left"  colspan="3">
									
									
	                        		<select name="pubCode" onchange="getArticlePublisherAsyncData(this.value);" id="pubCode"><option value="">Select Publisher</option>
	                        		<option value="ab">Aakar Books</option>
<option value="ap">Aavishar Publications</option>
<option value="abdp">ABD Publications</option>
<option value="abhip">Abhishek Publications</option>
<option value="akp">Agam Kala Prakashan</option>
<option value="aiaa">AIAA</option>
<option value="ebookowo">All Free Media (e-bookowo)</option>
<option value="allenpress">Allen Press</option>
<option value="alok">alok</option>
<option value="alpb">Alp Books</option>
<option value="aph">Anshah Publishing House</option>
<option value="asb">Asian Books</option>
<option value="atena">Atēna</option>
<option value="aup">Authors Press</option>
<option value="avots">Avots</option>
<option value="bsp">B S Publication</option>
<option value="brb">Better Books</option>
<option value="bk">bijay kmuar</option>
<option value="bph">Bimla Publishing House</option>
<option value="bhb">Biotech Books</option>
<option value="biznesa augstskola turiba">Biznesa augstskola Turība</option>
<option value="be">Book Enclave</option>
<option value="u01">check</option>
<option value="001">check1</option>
<option value="cp">Computech Publication</option>
<option value="dbb">Delhi Book Bureau</option>
<option value="dgramata">Dienas Grāmata</option>
<option value="djoef">DJØF Forlag</option>
<option value="dummypub1">Dummy Publisher1</option>
<option value="dummypub2">Dummy Publisher2</option>
<option value="egramata">eGramata</option>
<option value="egrammempublisher">egramataMemberPublisher </option>
<option value="eb">Epitome Books</option>
<option value="gtp">Genetech Publications</option>
<option value="gillmac">Gill &amp; MacMillan</option>
<option value="gmedia">Global Media</option>
<option value="gp">Gyan Publications</option>
<option value="hbpl">Himalaya Books Pvt. Ltd.</option>
<option value="hph">Himalaya Publishing House</option>
<option value="hb">Holiday Bookstore</option>
<option value="ibdc">Ibdc</option>
<option value="iip">Inter-India Publications</option>
<option value="jumava">Jumava</option>
<option value="jana rozes apgads">Jāņa Rozes apgāds</option>
<option value="kp">Kalpaz Publications</option>
<option value="kontinents">Kontinents</option>
<option value="lbb">Latvijas Bībeles biedrība</option>
<option value="ldp">Leeladevi Publications</option>
<option value="lkjh">lkjh</option>
<option value="mpil">macmillan publishers india limited</option>
<option value="mpst">macmillan publishing</option>
<option value="madris">Madris</option>
<option value="mmp">Managalam Prakashan</option>
<option value="mp">Mayur Publication</option>
<option value="dummy_mempub">Mem</option>
<option value="mm">Mind Melodies</option>
<option value="mjhu">mjhu</option>
<option value="moderator">Moderator</option>
<option value="mtp">Mohit Publications</option>
<option value="mps">MPS</option>
<option value="1234">mps test</option>
<option value="mpstest1">mpstest1</option>
<option value="nims">N.I.M.S</option>
<option value="ngm">National Gandhi Museum</option>
<option value="niace">National Institute of Adult Continuing Education (NIACE)</option>
<option value="np">Navyug Publications</option>
<option value="nap">New Asian Publications</option>
<option value="njf">Nyt Juridisk Forlag</option>
<option value="impuls">Oficyna Wydawnicza Impuls</option>
<option value="aks">omkar</option>
<option value="obc">Oxford Book Co.</option>
<option value="pdp">Paradise Publications</option>
<option value="pbs">Pharma Book Syndicate</option>
<option value="pbp">Prabha Publications</option>
<option value="p01">pradeep</option>
<option value="pgp">Pragati Prakashan</option>
<option value="pp">Pragun Publications</option>
<option value="petergailis">Pētergailis</option>
<option value="qwer">qwer1</option>
<option value="rsb">R. S. Books</option>
<option value="rp">Rahul Publications</option>
<option value="rjp">Rajat Publications</option>
<option value="rpp">Rajput Publications</option>
<option value="raka">RaKa</option>
<option value="rtp">Rastogi Publications</option>
<option value="rae">Readworthy And Epitome</option>
<option value="rts">revive</option>
<option value="sasp">Satish Serial Publications</option>
<option value="satp">Satya Prakashan</option>
<option value="scitp">SCI Tech Publishing</option>
<option value="sp">Shipra Publications</option>
<option value="smp">Studium Press</option>
<option value="sas">Suarup And Sons</option>
<option value="sunp">Sunrise Publishers</option>
<option value="skp">Swastik Publications</option>
<option value="spc">Swastik Publications (Chandigarh)</option>
<option value="sip">Swati Publications</option>
<option value="TP">Test Publisher</option>
<option value="jhup">The Johns Hopkins University Press</option>
<option value="tiesu namu agentura">Tiesu namu aģentūra</option>
<option value="uo1">urmi</option>
<option value="versita">versita.pl</option>
<option value="croner">Wolters Kluwer Croner business</option>
<option value="wp">Word Press</option>
<option value="wasle">World Association For Studies In Literatures In English</option>
<option value="wtbooks">World Technology</option>
<option value="ajpress">Wydawnictwo AJ- Press</option>
<option value="wahe">Wydawnictwo Akademii Humanistyczno-Ekonomicznej w Łodzi</option>
<option value="empi2">Wydawnictwo eMPi&amp;#178;</option>
<option value="homodei">Wydawnictwo Homo Dei</option>
<option value="wkarmel">Wydawnictwo Karmelitów Bosych</option>
<option value="kastor">Wydawnictwo Kastor</option>
<option value="wuam">Wydawnictwo Naukowe Uniwersytetu im. Adama Mickiewicza</option>
<option value="wumk">Wydawnictwo Naukowe Uniwersytetu Mikołaja Kopernika</option>
<option value="placet">Wydawnictwo Placet</option>
<option value="wpk">Wydawnictwo Politechniki Krakowskiej</option>
<option value="wug">Wydawnictwo Uniwersytetu Gdańskiego</option>
<option value="zysk">Wydawnictwo Zysk i S-ka</option>
<option value="yp">Yugank Publisher</option>
<option value="zinatne">Zinātne</option></select>
									
								</td>
							</tr>

							<tr>
								<td height="25" align="left">
									DOI
								</td>
								<td height="25" align="left">
									<input type="text" name="doiCode" size="30" value="" id="doiCode" class="text_field">
								</td>

								<td height="25" align="left">
									Content Code<span class="mandtory">*</span>
								</td>
								<td height="25" align="left">
								
									
								
									<input type="text" name="code" size="30" value="" id="code" class="text_field">
									
								<input type="hidden" name="id" value="" id="id" class="text_field">
								</td>
							</tr>
							<tr>
								<td height="25" align="left">
									Journal Title<span class="mandtory">*</span>
								</td>
								<td align="left">
									<div id="journalCodeDiv">
									
									
										<select name="journalCode" id="journalCode"><option value="">Select</option></select>
									
									</div>
								</td>

								<td height="25" align="left">
									Article Type<span class="mandtory">*</span>
								</td>
								<td align="left">
									
									
									
	                        		<select name="articleType" onchange="setValidArticleTypeFields(this.value)" id="articleType"><option value="">Select</option>
									
									
									
												
												<option value="issue">Issue</option>
									
												
												<option value="early bird">Early Bird</option></select>
									
								</td>
							</tr>
							
							<tr>
								<td height="25" align="left">
									Issue Type<span class="mandtory">*</span>
								</td>
								<td align="left" colspan="3">
									
									
									
										
										
											<select name="issueType" onchange="setValidIssueTypeFields(this.value)" id="issueType"><option value="">Select</option>
												
												
												
															
															<option value="Regular">Regular</option>
												
															
															<option value="Supplement">Supplement</option>
												
															
															<option value="Double">Double</option></select>
										
										
		                        		
									
									
								</td>
								
							</tr>
							
							<tr>
								<td height="25" align="left">
									Volume Number<span class="mandtory">*</span>
								</td>
								<td align="left">
									
									
										
										
											<input type="text" name="volumeNumber" size="30" value="" id="volumeNumber" class="text_field">
										
										
									
								</td>
								<td height="25" align="left">
									Volume Title
								</td>
								<td align="left" >
									
									
										
										
											<input type="text" name="volumeTitle" size="30" value="" id="volumeTitle" class="text_field">
										
										
									
									
								</td>	
							</tr>
							
							<tr>
								<td height="25" align="left">
										Issue Number<span class="mandtory">*</span>
								</td>
								<td align="left">
									
									
										
										
											
											
												<input type="text" name="issueNumber" size="30" value="" disabled="disabled" id="issueNumber" class="text_field">
											
										
										
									
											
								</td>
								<td height="25" align="left">
										Issue Supplement<span class="mandtory">*</span>
								</td>
								<td align="left">
									
									
										
										
											
											
												<input type="text" name="issueSupplement" size="30" value="" disabled="disabled" id="issueSupplement" class="text_field">
											
										
										
									
										
								</td>
							</tr>
							<tr>
								<td height="25" align="left">
										Issue Number Begin<span class="mandtory">*</span>
								</td>
								<td align="left">
									
									
										
										
											
											
												<input type="text" name="issueNumberBegin" size="30" value="" disabled="disabled" id="issueNumberBegin" class="text_field">
											
										
										
									
								</td>
								<td height="25" align="left">
										Issue Number End<span class="mandtory">*</span>
								</td>
								<td align="left">
									
									
										
										
											
											
												<input type="text" name="issueNumberEnd" size="30" value="" disabled="disabled" id="issueNumberEnd" class="text_field">
											
										
										
									
								</td>
							</tr>
							
							<tr>
							
								<td height="25" align="left">
									Access Level<span class="mandtory">*</span>
								</td>
								<td align="left">
									
									
									<select name="accessLevel" id="accessLevel"><option value="">Select</option>
										
										
										
													
													<option value="FREE">Free</option>
										
													
													<option value="PAID">Paid</option></select>
									
								</td>
								
								<td height="25" align="left">
									Article Languages<span class="mandtory">*</span>
								</td>
								<td align="left">
									<div id="languageArrayDiv" >
										<select name="languageArray" multiple="multiple" size="3"><option value="">Select</option></select>
                        			</div>
								</td>	
								
							</tr>
							
							<tr>
								<td height="25" align="left">
									External DRM<span class="mandtory">*</span>
								</td>
								<td align="left">
									<input type="radio" name="externalDRM" value="Y">Yes
                    				&nbsp;&nbsp;
									<input type="radio" name="externalDRM" value="N" checked="checked">No
								</td>	
								<td height="25" align="left">
									Article Sequence Number
								</td>
								<td align="left">
									<input type="text" name="articleSequenceNumber" size="30" value="" id="articleSequenceNumber" class="text_field">
								</td>
								
								
							</tr>
							
							<tr>
								<td height="25" align="left">
									Publication Date<span class="mandtory">*</span>
								</td>
								<td align="left">
									<table>
										<tr>
											<td><input type="text" name="publicationDate" size="25" value="" readonly="readonly" id="cal-field-5" class="text_field"></td>
											<td>&nbsp;</td>
											<td>
												<a href="#"> <img src="images/search_img_blue.gif" width="21" height="18" border="0" id="cal-button-5" style="cursor:pointer;cursor:hand" /> </a>
                                                        <script type="text/javascript">
					pt>  
											</td>
											<td>
												<img src="images/clear_cal.gif" width="21" height="18" border="0" onclick="clearElement('cal-field-5')" style="cursor:pointer;cursor:hand" /> 
											</td>
										</tr>
									</table>
									
								</td>
								
								<td height="25" align="left">
									Issue Cover Date
								</td>
								<td align="left">
									
									<table>
										<tr>
											<td><input type="text" name="coverDate" size="25" value="" readonly="readonly" id="cal-field-6" class="text_field"></td>
											<td>&nbsp;</td>
											<td>
												<a href="#"> <img src="images/search_img_blue.gif" width="21" height="18" border="0" id="cal-button-6" style="cursor:pointer;cursor:hand" /> </a>
                                                        <script type="text/javascript">
						  
											</td>
											<td>
												<img src="images/clear_cal.gif" width="21" height="18" border="0" onclick="clearElement('cal-field-6')" style="cursor:pointer;cursor:hand" /> 
											</td>
										</tr>
									</table>
								</td>
							</tr>
							
							<tr>
							<td>Stock Number</td>
                  <td><input type="text" name="stockNumber" value="" class="text_field"></td></tr>
              
							</tr>
							<tr>
                  				<td valign="top">Abstract</td>
                  				<td colspan="3"><textarea name="blurb" cols="50" rows="5" readonly="readonly"></textarea></td>
                			</tr>
					</table>
				</td>
			</tr>
		</table>
		</td>
		</tr>
		<tr>
			<td>


<script type="text/javascript" language="Javascript" src="scripts/reflibrary.js"></script>
<script type="text/javascript" language="Javascript" src="scripts/dateutil.js"></script>
<script type="text/javascript" language="Javascript" src="scripts/contentValidation.js"></script>
<table width="860" border="0" cellspacing="0" cellpadding="0">
      
            
            <tr>
              <td><table width="90%" border="0" cellpadding="10" cellspacing="0">
              
              	<tr>
                  <td colspan="3"><strong>Contributor's Information</strong></td>
                </tr>
                <tr>
                  <td colspan="4"><div style="min-height:100px; max-height:190px; overflow:auto;">
			      	<table width="97%" border=0 cellPadding="8" cellSpacing="1" id="contributorTable" bgColor="#cccccc">
				  	  <tbody>
				   		<tr>
				   			<td align="left" class="tableheader">Role*</td>
				     		<td height="25" align="left" class="tableheader">Name*</td>
				   			<td align="left" class="tableheader">Description</td>
						</tr>
                   		
				  			
				      </tbody>
					</table>
				  </div></td>
                </tr>
                
                <tr>
				
                  <td colspan="3"><strong>Content Format</strong></td>
                  <td align="right"><a href="Javascript:onClick=validateFormatListandAddRow('formatTable',3,1)"><img src="images/add.gif" width="12" height="12" border="0" /></a>&nbsp;&nbsp;<a href="Javascript:onClick=deleteRowModified('formatTable',3,1,document.getElementById('formContentPrice').selFomatDataCK)"><img src="images/remove.gif" width="12" height="12" border="0" /></a>&nbsp;</td>
                </tr>
                <tr>
                  <td colspan="4"><div style="min-height:90px; max-height:200px; overflow:auto;">
	<table width="97%" border=0 cellPadding="8" cellSpacing="1" id="formatTable" bgColor="#cccccc">
	<tbody>
	<tr>
	<td width="3%" height="25" class="tableheader"><input type="checkbox" name="checkboxFormat" value="checkbox" onClick="applyToAllCheckBox('formContentPrice','selFomatDataCK',this);" /></td>
	<td height="25" align="left" class="tableheader">Format</td>
	<td align="left" class="tableheader">DOI</td>
	
	</tr>
	
	
	
	<tr>
	<td height="25" bgcolor="#fbfbfb"><input type="checkbox" name="selFomatDataCK" value="checkbox" /></td>
	<td bgcolor="#fbfbfb">
	<select name="contentFormats[0].formatType" id="formatType"><option selected="true" value="">
		Select
	  </option>
	  <option value="AAC">AAC</option>
<option value="EPUB">EPUB</option>
<option value="OEB">OEB</option>
<option value="LIT">LIT</option>
<option value="HB">HB</option>
<option value="AER">AER</option>
<option value="Exam Paper">EP</option>
<option value="EXT">EXT</option>
<option value="CD">CD</option>
<option value="ONL">ONL</option>
<option value="PB">PB</option>
<option value="PRC">PRC</option>
<option value="WMA">WMA</option>
<option value="PDF">PDF</option></select></td>
	
	<td bgcolor="#fbfbfb">
	<input type="text" name="contentFormats[0].formatDOI" size="10" value="" class="text_field">
	
	</td>
	</tr>
	
	
	
	</tbody>
	</table>
	</div></td>
                </tr>
                <tr>
                  <td colspan="3"><strong>Base Online Access</strong></td>
                  <td align="right"><a href="Javascript:onClick=validateBOAListandAddRow('baseONLPriceTable',4,1)"><img border="0" src="images/add.gif" width="12" height="12" />&nbsp;&nbsp;</a><a href="Javascript:onClick=deleteRowModified('baseONLPriceTable',4,1,document.getElementById('formContentPrice').selbaseONLPriceDataCK)"><img border="0" src="images/remove.gif" width="12" height="12" />&nbsp;</a></td>
                </tr>
                <tr>
                  <td colspan="4"><div style="min-height:90px; max-height:200px; overflow:auto;" id="onlinePriceDiv">
	<table width="97%" border=0 cellPadding="8"
	cellSpacing=1 bgcolor="#cccccc"  id="baseONLPriceTable">
	
	<tbody>
	
	<tr>
	<td height="25" class="tableheader"><input type="checkbox" name="checkbox5" value="checkbox" onclick="applyToAllCheckBox('formContentPrice','selbaseONLPriceDataCK',this);" />	</td>
	<td height="25" align="left" class="tableheader">Country</td>
	<td align="left" class="tableheader">Currency</td>
	<td align="left" class="tableheader">Price</td>
	</tr>
	
	
	
	
	
	<tr>
	<td width="15" height="25" bgcolor="#fbfbfb"><input type="checkbox"name="selbaseONLPriceDataCK" value="checkbox" />	</td>
	<td bgcolor="#fbfbfb">
		<div id="countryOnlineDiv" >
		<select name="contentFormatOnlinePrices[0].country" id="onlineCountry"><option selected="true" value="">
			Select
		  </option></select>	
		</div>
	</td>
	  <td bgcolor="#fbfbfb"  >
	  	<div id="currencyOnlineDiv" >
		<select name="contentFormatOnlinePrices[0].currency" id="onlineCurrency"><option selected="true" value="">
			Select
		  </option></select>	
		</div>
	  </td>
	  <td bgcolor="#fbfbfb"  >
		<input type="text" name="contentFormatOnlinePrices[0].price" size="10" value="0.0" onchange="validateCurrency(this);" class="text_field">	</td>
	</tr>
	
	
	
	</tbody>
	
	</table>
	</div></td>
                </tr>
                
                <tr>
                  <td colspan="3"><strong>Base Download Price  </strong></td>
                  <td align="right"><a href="Javascript:onClick=validateBCPListandAddRow('comboPriceTable',4,1)">
	<img border="0" src="images/add.gif" width="12" height="12" /></a>&nbsp;&nbsp;<a href="Javascript:onClick=deleteRowModified('comboPriceTable',4,1,document.getElementById('formContentPrice').checkbox3)">
	<img border="0" src="images/remove.gif" width="12" height="12" /></a>&nbsp;</td>
                </tr>
                <tr>
                  <td colspan="4"><div style="min-height:90px; max-height:200px; overflow:auto;" id="downloadPriceDiv">
	<table width="97%" border=0 cellPadding="8" cellSpacing=1 bgcolor="#cccccc" id="comboPriceTable">
	<tbody>
	<tr>
	<td height="25" class="tableheader"><input type="checkbox" name="checkbox531" value="checkbox" onclick="applyToAllCheckBox('formContentPrice','checkbox3',this);" /></td>
	<td height="25" align="left" class="tableheader">Country</td>
	<td align="left" class="tableheader">Currency</td>
	<td align="left" class="tableheader">Price</td>
	</tr>
	
	
	
	<tr>
	<td width="15" height="25" bgcolor="#fbfbfb">
	<input type="checkbox" name="checkbox3" value="checkbox" />	</td>
	<td bgcolor="#fbfbfb">
		<div id="countryDownloadDiv" >
			<select name="contentFormatDownloadPrices[0].country" id="downloadCountry"><option selected="true" value="">
				Select
			  </option></select>	
		</div>
	</td>
	<td bgcolor="#fbfbfb">
		<div id="currencyDownloadDiv" >
			<select name="contentFormatDownloadPrices[0].currency" id="downloadCurrency"><option selected="true" value="">
				Select
			  </option></select>	
		</div>
	</td>
	<td bgcolor="#fbfbfb"  >
	<input type="text" name="contentFormatDownloadPrices[0].price" size="10" value="0.0" onchange="validateCurrency(this);" class="text_field">	</td>
	</tr>
	
	
	</tbody>
	</table>
	</div></td>
                </tr>
                
                <tr>
                  <td>&nbsp;</td>
                  <td colspan="3" align="right">
                  
                  <input type="submit" value="Submit" class="submit_btn">
                  
                  </td>
                </tr>
                
                
              </table></td>
            </tr>
            <tr>
              <td>&nbsp;</td>
            </tr>
  </table>
  
<script language="javascript">
var priceValidationFlag=false;
function validateCurrency( obj)  {
		var exp = new RegExp('^[0-9]*(\.[0-9]{1,2})?$');
		var objVal=obj.value;
	if(!exp.test(objVal)){
		alert('The Price field is numeric and can have upto 2 decimal places.');
		obj.value = "";
//		alert(obj.name);
		obj.focus();
		priceValidationFlag=true;
//		obj.select();
		return false;
	}
	priceValidationFlag=false;
	return true;
}
</script>
</td>
		</tr>
		</table>
		
		<script type="text/javascript" language="Javascript1.1"> 

<!-- Begin 

     var bCancel = false; 

    function validateArticleForm(form) {                                                                   
        if (bCancel) 
      return true; 
        else 
 var formValidationResult;
       formValidationResult = validateCustomRequired(form) && validateMask(form); 
     return (formValidationResult == 1);
   } 

    function articleForm_customRequired () { 
     this.a0 = new Array("pubCode", "Publisher is required.", new Function ("varName", " return this[varName];"));
     this.a1 = new Array("code", "Content Code is required", new Function ("varName", "this.mask=/^[a-zA-Z0-9.,:\\-_\\\\\\\\/ ]*$/;  return this[varName];"));
     this.a2 = new Array("journalCode", "Journal Title is required", new Function ("varName", " return this[varName];"));
     this.a3 = new Array("articleType", "Article Type is required", new Function ("varName", " return this[varName];"));
     this.a4 = new Array("issueType", "Issue Type is required", new Function ("varName", " return this[varName];"));
     this.a5 = new Array("volumeNumber", "Volume Number is required", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a6 = new Array("issueNumber", "Issue Number is required", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a7 = new Array("issueSupplement", "Issue Supplement is required", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a8 = new Array("issueNumberBegin", "Issue Number Begin is required", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a9 = new Array("issueNumberEnd", "Issue Number End is required", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a10 = new Array("accessLevel", "Access Level is required", new Function ("varName", " return this[varName];"));
     this.a11 = new Array("publicationDate", "Publication Date is required", new Function ("varName", " return this[varName];"));
     this.a12 = new Array("languageArray", "Article Language is required", new Function ("varName", " return this[varName];"));
    } 

    function articleForm_mask () { 
     this.a0 = new Array("doiCode", "DOI is invalid.", new Function ("varName", "this.mask=/^[a-zA-Z0-9.,:\\-_\\\\\\\\/ ]*$/;  return this[varName];"));
     this.a1 = new Array("code", "Content Code is invalid.", new Function ("varName", "this.mask=/^[a-zA-Z0-9.,:\\-_\\\\\\\\/ ]*$/;  return this[varName];"));
     this.a2 = new Array("volumeNumber", "Volume Number is invalid.", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a3 = new Array("issueNumber", "Issue Number is invalid.", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a4 = new Array("issueSupplement", "null is invalid.", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a5 = new Array("issueNumberBegin", "Issue Number Begin is invalid.", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a6 = new Array("issueNumberEnd", "Issue Number End is invalid.", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a7 = new Array("articleSequenceNumber", "Article Sequence Number is invalid.", new Function ("varName", "this.mask=/^[0-9]*$/;  return this[varName];"));
     this.a8 = new Array("volumeTitle", "Volume Title is invalid.", new Function ("varName", "this.mask=/^[^=!\\$&<>]*$/;  return this[varName];"));
    } 




    /*$RCSfile: validateMinLength.js,v $ $Revision: 1.11 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * A field is considered valid if greater than the specified minimum.
    * Fields are not checked if they are disabled.
    * <p>
    * <strong>Caution:</strong> Using <code>validateMinLength</code> on a password field in a 
    *  login page gives unnecessary information away to hackers. While it only slightly
    *  weakens security, we suggest using it only when modifying a password.</p>
    * @param form The form validation is taking place on.
    */
    function validateMinLength(form) {
        var isValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name");


        oMinLength = eval('new ' + formName.value + '_minlength()');

        for (x in oMinLength) {
            var field = form[oMinLength[x][0]];

            if ((field.type == 'hidden' ||
                field.type == 'text' ||
                field.type == 'password' ||
                field.type == 'textarea') &&
                field.disabled == false) {

                var iMin = parseInt(oMinLength[x][2]("minlength"));
                if ((trim(field.value).length > 0) && (field.value.length < iMin)) {
                    if (i == 0) {
                        focusField = field;
                    }
                    fields[i++] = oMinLength[x][1];
                    isValid = false;
                }
            }
        }
        if (fields.length > 0) {
           focusField.focus();
           alert(fields.join('\n'));
        }
        return isValid;
    }

    /*$RCSfile: validateUtilities.js,v $ $Revision: 1.2 $ $Date: 2004/03/28 16:53:21 $ */

  /**
  * This is a place holder for common utilities used across the javascript validation
  *
  **/


   /*$RCSfile: validateFloatRange.js,v $ $Revision: 1.9 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * Check to see if fields are in a valid float range.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateFloatRange(form) {
        var isValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name"); 

        oRange = eval('new ' + formName.value + '_floatRange()');
        for (x in oRange) {
            var field = form[oRange[x][0]];
            
            if ((field.type == 'hidden' ||
                field.type == 'text' || field.type == 'textarea') &&
                (field.value.length > 0)  &&
                 field.disabled == false) {
        
                var fMin = parseFloat(oRange[x][2]("min"));
                var fMax = parseFloat(oRange[x][2]("max"));
                var fValue = parseFloat(field.value);
                if (!(fValue >= fMin && fValue <= fMax)) {
                    if (i == 0) {
                        focusField = field;
                    }
                    fields[i++] = oRange[x][1];
                    isValid = false;
                }
            }
        }
        if (fields.length > 0) {
            focusField.focus();
            alert(fields.join('\n'));
        }
        return isValid;
    }


    /*$RCSfile: validateIntRange.js,v $ $Revision: 1.10 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * Check to see if fields is in a valid integer range.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateIntRange(form) {
        var isValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name"); 

        oRange = eval('new ' + formName.value + '_intRange()');        
        for (x in oRange) {
            var field = form[oRange[x][0]];
            if (field.disabled == false)  {
                var value = '';
                if (field.type == 'hidden' ||
                    field.type == 'text' || field.type == 'textarea' ||
                    field.type == 'radio' ) {
                    value = field.value;
                }
                if (field.type == 'select-one') {
                    var si = field.selectedIndex;
                    if (si >= 0) {
                        value = field.options[si].value;
                    }
                }
                if (value.length > 0) {
                    var iMin = parseInt(oRange[x][2]("min"));
                    var iMax = parseInt(oRange[x][2]("max"));
                    var iValue = parseInt(value);
                    if (!(iValue >= iMin && iValue <= iMax)) {
                        if (i == 0) {
                            focusField = field;
                        }
                        fields[i++] = oRange[x][1];
                        isValid = false;
                    }
                }
            }
        }
        if (fields.length > 0) {
            focusField.focus();
            alert(fields.join('\n'));
        }
        return isValid;
    }


    /*$RCSfile: validateInteger.js,v $ $Revision: 1.9 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * Check to see if fields are a valid integer.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateInteger(form) {
        var bValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name"); 

        oInteger = eval('new ' + formName.value + '_IntegerValidations()');
        for (x in oInteger) {
            var field = form[oInteger[x][0]];

            if ((field.type == 'hidden' ||
                field.type == 'text' ||
                field.type == 'textarea' ||
                field.type == 'select-one' ||
                field.type == 'radio') &&
                field.disabled == false) {

                var value = '';
                // get field's value
                if (field.type == "select-one") {
                    var si = field.selectedIndex;
                    if (si >= 0) {
                        value = field.options[si].value;
                    }
                } else {
                    value = field.value;
                }

                if (value.length > 0) {

                    if (!isAllDigits(value)) {
                        bValid = false;
                        if (i == 0) {
                            focusField = field;
                        }
                        fields[i++] = oInteger[x][1];

                    } else {
                        var iValue = parseInt(value);
                        if (isNaN(iValue) || !(iValue >= -2147483648 && iValue <= 2147483647)) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oInteger[x][1];
                            bValid = false;
                       }
                   }
               }
            }
        }
        if (fields.length > 0) {
           focusField.focus();
           alert(fields.join('\n'));
        }
        return bValid;
    }

    function isAllDigits(argvalue) {
        argvalue = argvalue.toString();
        var validChars = "0123456789";
        var startFrom = 0;
        if (argvalue.substring(0, 2) == "0x") {
           validChars = "0123456789abcdefABCDEF";
           startFrom = 2;
        } else if (argvalue.charAt(0) == "0") {
           validChars = "01234567";
           startFrom = 1;
        } else if (argvalue.charAt(0) == "-") {
            startFrom = 1;
        }

        for (var n = startFrom; n < argvalue.length; n++) {
            if (validChars.indexOf(argvalue.substring(n, n+1)) == -1) return false;
        }
        return true;
    }


    /*$RCSfile: validateMask.js,v $ $Revision: 1.10 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * Check to see if fields are a valid using a regular expression.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateMask(form) {
        var isValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name"); 

        oMasked = eval('new ' + formName.value + '_mask()');      
        for (x in oMasked) {
            var field = form[oMasked[x][0]];

            if ((field.type == 'hidden' ||
                field.type == 'text' ||
                 field.type == 'textarea' ||
				 field.type == 'file') &&
                 (field.value.length > 0) &&
                 field.disabled == false) {

                if (!matchPattern(field.value, oMasked[x][2]("mask"))) {
                    if (i == 0) {
                        focusField = field;
                    }
                    fields[i++] = oMasked[x][1];
                    isValid = false;
                }
            }
        }

        if (fields.length > 0) {
           focusField.focus();
           alert(fields.join('\n'));
        }
        return isValid;
    }

    function matchPattern(value, mask) {
       return mask.exec(value);
    }


   /*$RCSfile: validateDate.js,v $ $Revision: 1.10 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * Check to see if fields are a valid date.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateDate(form) {
       var bValid = true;
       var focusField = null;
       var i = 0;
       var fields = new Array();
       var formName = form.getAttributeNode("name"); 

       oDate = eval('new ' + formName.value + '_DateValidations()');

       for (x in oDate) {
           var field = form[oDate[x][0]];
           var value = field.value;
           var datePattern = oDate[x][2]("datePatternStrict");
           // try loose pattern
           if (datePattern == null)
               datePattern = oDate[x][2]("datePattern");
           if ((field.type == 'hidden' ||
                field.type == 'text' ||
                field.type == 'textarea') &&
               (value.length > 0) && (datePattern.length > 0) &&
                field.disabled == false) {
                 var MONTH = "MM";
                 var DAY = "dd";
                 var YEAR = "yyyy";
                 var orderMonth = datePattern.indexOf(MONTH);
                 var orderDay = datePattern.indexOf(DAY);
                 var orderYear = datePattern.indexOf(YEAR);
                 if ((orderDay < orderYear && orderDay > orderMonth)) {
                     var iDelim1 = orderMonth + MONTH.length;
                     var iDelim2 = orderDay + DAY.length;
                     var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
                     var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
                     if (iDelim1 == orderDay && iDelim2 == orderYear) {
                        dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
                     } else if (iDelim1 == orderDay) {
                        dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
                     } else if (iDelim2 == orderYear) {
                        dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
                     } else {
                        dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
                     }
                     var matched = dateRegexp.exec(value);
                     if(matched != null) {
                        if (!isValidDate(matched[2], matched[1], matched[3])) {
                           if (i == 0) {
                               focusField = field;
                           }
                           fields[i++] = oDate[x][1];
                           bValid =  false;
                        }
                     } else {
                        if (i == 0) {
                            focusField = field;
                        }
                        fields[i++] = oDate[x][1];
                        bValid =  false;
                     }
                 } else if ((orderMonth < orderYear && orderMonth > orderDay)) {
                     var iDelim1 = orderDay + DAY.length;
                     var iDelim2 = orderMonth + MONTH.length;
                     var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
                     var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
                     if (iDelim1 == orderMonth && iDelim2 == orderYear) {
                         dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
                     } else if (iDelim1 == orderMonth) {
                         dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
                     } else if (iDelim2 == orderYear) {
                         dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
                     } else {
                         dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
                     }
                     var matched = dateRegexp.exec(value);
                     if(matched != null) {
                         if (!isValidDate(matched[1], matched[2], matched[3])) {
                             if (i == 0) {
                         focusField = field;
                             }
                             fields[i++] = oDate[x][1];
                             bValid =  false;
                          }
                     } else {
                         if (i == 0) {
                             focusField = field;
                         }
                         fields[i++] = oDate[x][1];
                         bValid =  false;
                     }
                 } else if ((orderMonth > orderYear && orderMonth < orderDay)) {
                     var iDelim1 = orderYear + YEAR.length;
                     var iDelim2 = orderMonth + MONTH.length;
                     var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
                     var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
                     if (iDelim1 == orderMonth && iDelim2 == orderDay) {
                         dateRegexp = new RegExp("^(\\d{4})(\\d{2})(\\d{2})$");
                     } else if (iDelim1 == orderMonth) {
                         dateRegexp = new RegExp("^(\\d{4})(\\d{2})[" + delim2 + "](\\d{2})$");
                     } else if (iDelim2 == orderDay) {
                         dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})(\\d{2})$");
                     } else {
                         dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{2})$");
                     }
                     var matched = dateRegexp.exec(value);
                     if(matched != null) {
                         if (!isValidDate(matched[3], matched[2], matched[1])) {
                             if (i == 0) {
                                 focusField = field;
                             }
                             fields[i++] = oDate[x][1];
                             bValid =  false;
                         }
                     } else {
                          if (i == 0) {
                              focusField = field;
                          }
                          fields[i++] = oDate[x][1];
                          bValid =  false;
                     }
                 } else {
                     if (i == 0) {
                         focusField = field;
                     }
                     fields[i++] = oDate[x][1];
                     bValid =  false;
                 }
          }
       }
       if (fields.length > 0) {
          focusField.focus();
          alert(fields.join('\n'));
       }
       return bValid;
    }
    
    function isValidDate(day, month, year) {
	    if (month < 1 || month > 12) {
            return false;
        }
        if (day < 1 || day > 31) {
            return false;
        }
        if ((month == 4 || month == 6 || month == 9 || month == 11) &&
            (day == 31)) {
            return false;
        }
        if (month == 2) {
            var leap = (year % 4 == 0 &&
               (year % 100 != 0 || year % 400 == 0));
            if (day>29 || (day == 29 && !leap)) {
                return false;
            }
        }
        return true;
    }


    /*$RCSfile: validateFloat.js,v $ $Revision: 1.11 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * Check to see if fields are a valid float.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateFloat(form) {
        var bValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
         var formName = form.getAttributeNode("name");

        oFloat = eval('new ' + formName.value + '_FloatValidations()');
        for (x in oFloat) {
        	var field = form[oFloat[x][0]];
        	
            if ((field.type == 'hidden' ||
                field.type == 'text' ||
                field.type == 'textarea' ||
                field.type == 'select-one' ||
                field.type == 'radio') &&
                field.disabled == false) {
        
            	var value = '';
                // get field's value
                if (field.type == "select-one") {
                    var si = field.selectedIndex;
                    if (si >= 0) {
                        value = field.options[si].value;
                    }
                } else {
                    value = field.value;
                }
        
                if (value.length > 0) {
                    // remove '.' before checking digits
                    var tempArray = value.split('.');
                    //Strip off leading '0'
                    var zeroIndex = 0;
                    var joinedString= tempArray.join('');
                    while (joinedString.charAt(zeroIndex) == '0') {
                        zeroIndex++;
                    }
                    var noZeroString = joinedString.substring(zeroIndex,joinedString.length);

                    if (!isAllDigits(noZeroString)) {
                        bValid = false;
                        if (i == 0) {
                            focusField = field;
                        }
                        fields[i++] = oFloat[x][1];

                    } else {
	                var iValue = parseFloat(value);
	                if (isNaN(iValue)) {
	                    if (i == 0) {
	                        focusField = field;
	                    }
	                    fields[i++] = oFloat[x][1];
	                    bValid = false;
	                }
                    }
                }
            }
        }
        if (fields.length > 0) {
           focusField.focus();
           alert(fields.join('\n'));
        }
        return bValid;
    }


    /*$RCSfile: validateCreditCard.js,v $ $Revision: 1.8 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * Check to see if fields are a valid creditcard number based on Luhn checksum.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateCreditCard(form) {
        var bValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name");

        oCreditCard = eval('new ' + formName.value + '_creditCard()');

        for (x in oCreditCard) {
            if ((form[oCreditCard[x][0]].type == 'text' ||
                 form[oCreditCard[x][0]].type == 'textarea') &&
                (form[oCreditCard[x][0]].value.length > 0)  &&
                 form[oCreditCard[x][0]].disabled == false) {
                if (!luhnCheck(form[oCreditCard[x][0]].value)) {
                    if (i == 0) {
                        focusField = form[oCreditCard[x][0]];
                    }
                    fields[i++] = oCreditCard[x][1];
                    bValid = false;
                }
            }
        }
        if (fields.length > 0) {
            focusField.focus();
            alert(fields.join('\n'));
        }
        return bValid;
    }

    /**
     * Checks whether a given credit card number has a valid Luhn checksum.
     * This allows you to spot most randomly made-up or garbled credit card numbers immediately.
     * Reference: http://www.speech.cs.cmu.edu/~sburke/pub/luhn_lib.html
     */
    function luhnCheck(cardNumber) {
        if (isLuhnNum(cardNumber)) {
            var no_digit = cardNumber.length;
            var oddoeven = no_digit & 1;
            var sum = 0;
            for (var count = 0; count < no_digit; count++) {
                var digit = parseInt(cardNumber.charAt(count));
                if (!((count & 1) ^ oddoeven)) {
                    digit *= 2;
                    if (digit > 9) digit -= 9;
                };
                sum += digit;
            };
            if (sum == 0) return false;
            if (sum % 10 == 0) return true;
        };
        return false;
    }

    function isLuhnNum(argvalue) {
        argvalue = argvalue.toString();
        if (argvalue.length == 0) {
            return false;
        }
        for (var n = 0; n < argvalue.length; n++) {
            if ((argvalue.substring(n, n+1) < "0") ||
                (argvalue.substring(n,n+1) > "9")) {
                return false;
            }
        }
        return true;
    }


    /*$RCSfile: validateShort.js,v $ $Revision: 1.9 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    *  Check to see if fields are a valid short.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateShort(form) {
        var bValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name");

        oShort = eval('new ' + formName.value + '_ShortValidations()');

        for (x in oShort) {
            var field = form[oShort[x][0]];

            if ((field.type == 'hidden' ||
                field.type == 'text' ||
                field.type == 'textarea' ||
                field.type == 'select-one' ||
                field.type == 'radio')  &&
                field.disabled == false) {

                var value = '';
                // get field'</palue
                if (field.type == "select-one") {
                    var si = field.selectedIndex;
                    if (si >= 0) {
                        value = field.options[si].value;
                    }
                } else {
                    value = field.value;
                }

                if (value.length > 0) {
                    if (!isAllDigits(value)) {
                        bValid = false;
                        if (i == 0) {
                            focusField = field;
                        }
                        fields[i++] = oShort[x][1];

                    } else {

                        var iValue = parseInt(value);
                        if (isNaN(iValue) || !(iValue >= -32768 && iValue <= 32767)) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oShort[x][1];
                            bValid = false;
                        }
                   }
               }
            }
        }
        if (fields.length > 0) {
           focusField.focus();
           alert(fields.join('\n'));
        }
        return bValid;
    }


    /*$RCSfile: validateMaxLength.js,v $ $Revision: 1.10 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * A field is considered valid if less than the specified maximum.
    * Fields are not checked if they are disabled.
    * <p>
    * <strong>Caution:</strong> Using <code>validateMaxLength</code> on a password field in a 
    *  login page gives unnecessary information away to hackers. While it only slightly
    *  weakens security, we suggest using it only when modifying a password.</p>
    * @param form The form validation is taking place on.
    */
    function validateMaxLength(form) {
        var isValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name"); 

        oMaxLength = eval('new ' + formName.value + '_maxlength()');        
        for (x in oMaxLength) {
            var field = form[oMaxLength[x][0]];

            if ((field.type == 'hidden' ||
                field.type == 'text' ||
                field.type == 'password' ||
                field.type == 'textarea') &&
                field.disabled == false) {

                var iMax = parseInt(oMaxLength[x][2]("maxlength"));
                if (field.value.length > iMax) {
                    if (i == 0) {
                        focusField = field;
                    }
                    fields[i++] = oMaxLength[x][1];
                    isValid = false;
                }
            }
        }
        if (fields.length > 0) {
           focusField.focus();
           alert(fields.join('\n'));
        }
        return isValid;
    }


   /*$RCSfile: validateEmail.js,v $ $Revision: 1.9 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * Check to see if fields are a valid email address.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateEmail(form) {
        var bValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name");


        oEmail = eval('new ' + formName.value + '_email()');

        for (x in oEmail) {
            var field = form[oEmail[x][0]];
            if ((field.type == 'hidden' || 
                 field.type == 'text' ||
                 field.type == 'textarea') &&
                (field.value.length > 0) &&
                field.disabled == false) {
                if (!checkEmail(field.value)) {
                    if (i == 0) {
                        focusField = field;
                    }
                    fields[i++] = oEmail[x][1];
                    bValid = false;
                }
            }
        }
        if (fields.length > 0) {
            focusField.focus();
            alert(fields.join('\n'));
        }
        return bValid;
    }

    /**
     * Reference: Sandeep V. Tamhankar (stamhankar@hotmail.com),
     * http://javascript.internet.com
     */
    function checkEmail(emailStr) {
       if (emailStr.length == 0) {
           return true;
       }
       var emailPat=/^(.+)@(.+)$/;
       var specialChars="\\(\\)<>@,;:\\\\\\\"\\.\\[\\]";
       var validChars="\[^\\s" + specialChars + "\]";
       var quotedUser="(\"[^\"]*\")";
       var ipDomainPat=/^(\d{1,3})[.](\d{1,3})[.](\d{1,3})[.](\d{1,3})$/;
       var atom=validChars + '+';
       var word="(" + atom + "|" + quotedUser + ")";
       var userPat=new RegExp("^" + word + "(\\." + word + ")*$");
       var domainPat=new RegExp("^" + atom + "(\\." + atom + ")*$");
       var matchArray=emailStr.match(emailPat);
       if (matchArray == null) {
           return false;
       }
       var user=matchArray[1];
       var domain=matchArray[2];
       if (user.match(userPat) == null) {
           return false;
       }
       var IPArray = domain.match(ipDomainPat);
       if (IPArray != null) {
           for (var i = 1; i <= 4; i++) {
              if (IPArray[i] > 255) {
                 return false;
              }
           }
           return true;
       }
       var domainArray=domain.match(domainPat);
       if (domainArray == null) {
           return false;
       }
       var atomPat=new RegExp(atom,"g");
       var domArr=domain.match(atomPat);
       var len=domArr.length;
       if ((domArr[domArr.length-1].length < 2) ||
           (domArr[domArr.length-1].length > 3)) {
           return false;
       }
       if (len < 2) {
           return false;
       }
       return true;
    }

  


    /*$RCSfile: validateByte.js,v $ $Revision: 1.9 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    * Check to see if fields are a valid byte.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */
    function validateByte(form) {
        var bValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name"); 
        oByte = eval('new ' + formName.value + '_ByteValidations()');

        for (x in oByte) {
            var field = form[oByte[x][0]];

            if ((field.type == 'hidden' ||
                field.type == 'text' ||
                field.type == 'textarea' ||
                field.type == 'select-one' ||
                field.type == 'radio')  &&
                field.disabled == false) {

                var value = '';
                // get field's value
                if (field.type == "select-one") {
                    var si = field.selectedIndex;
                    if (si >= 0) {
                        value = field.options[si].value;
                    }
                } else {
                    value = field.value;
                }

                if (value.length > 0) {
                    if (!isAllDigits(value)) {
                        bValid = false;
                        if (i == 0) {
                            focusField = field;
                        }
                        fields[i++] = oByte[x][1];

                    } else {

                        var iValue = parseInt(value);
                        if (isNaN(iValue) || !(iValue >= -128 && iValue <= 127)) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oByte[x][1];
                            bValid = false;
                        }
                    }
                }

            }
        }
        if (fields.length > 0) {
           focusField.focus();
           alert(fields.join('\n'));
        }
        return bValid;
    }

function validateCustomRequired(form) {
	      var isValid = true;
	      var focusField = null;
	      var i = 0;
	      var fields = new Array();
	      var formName = form.getAttributeNode("name");
	
	      oRequired = eval('new ' + formName.value + '_customRequired()');
	
	      for (x in oRequired) {
	          var field = form[oRequired[x][0]];
	
	          if ((field.type == 'hidden' ||
	              field.type == 'text' ||
	              field.type == 'textarea' ||
	              field.type == 'file' ||
	              field.type == 'checkbox' ||
	              field.type == 'select-one' ||
	              field.type == 'password') &&
	              field.disabled == false) {
	
	              var value = '';
	              // get field's value
	              if (field.type == "select-one") {
	                  var si = field.selectedIndex;
	                  if (si >= 0) {
	                      value = field.options[si].value;
	                  }
	              } else if (field.type == 'checkbox') {
	                  if (field.checked) {
	                      value = field.value;
	                  }
	              } else {
	                  value = field.value;
	              }
	
	              if (trim(value).length == 0) {
	
	                  if (i == 0) {
	                      focusField = field;
	                  }
	                  fields[i++] = oRequired[x][1];
	                  isValid = false;
	              }
	          } else if (field.type == "select-multiple") { 
	              var numOptions = field.options.length;
	              lastSelected=-1;
	              for(loop=numOptions-1;loop>=0;loop--) {
	                  if(field.options[loop].selected) {
	                      lastSelected = loop;
	                      value = field.options[loop].value;
	                      break;
	                  }
	              }
	              if(lastSelected < 0 || trim(value).length == 0) {
	                  if(i == 0) {
	                      focusField = field;
	                  }
	                  fields[i++] = oRequired[x][1];
	                  isValid=false;
	              }
	          } else if ((field.length > 0) && (field[0].type == 'radio' || field[0].type == 'checkbox')) {
	              isChecked=-1;
	              for (loop=0;loop < field.length;loop++) {
	                  if (field[loop].checked) {
	                      isChecked=loop;
	                      break; // only one needs to be checked
	                  }
	              }
	              if (isChecked < 0) {
	                  if (i == 0) {
	                      focusField = field[0];
	                  }
	                  fields[i++] = oRequired[x][1];
	                  isValid=false;
	              }
	          }
	      }
	      if (fields.length > 0) {
	         focusField.focus();
	         alert(fields.join('\n'));
	      }
	      return isValid;
	}

    /*$RCSfile: validateRequired.js,v $ $Revision: 1.13 $ $Date: 2004/03/28 16:53:21 $ */
    /**
    *  Check to see if fields must contain a value.
    * Fields are not checked if they are disabled.
    * <p>
    * @param form The form validation is taking place on.
    */

    function validateRequired(form) {
        var isValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name");

        oRequired = eval('new ' + formName.value + '_required()');

        for (x in oRequired) {
            var field = form[oRequired[x][0]];

            if ((field.type == 'hidden' ||
                field.type == 'text' ||
                field.type == 'textarea' ||
                field.type == 'file' ||
                field.type == 'checkbox' ||
                field.type == 'select-one' ||
                field.type == 'password') &&
                field.disabled == false) {

                var value = '';
                // get field's value
                if (field.type == "select-one") {
                    var si = field.selectedIndex;
                    if (si >= 0) {
                        value = field.options[si].value;
                    }
                } else if (field.type == 'checkbox') {
                    if (field.checked) {
                        value = field.value;
                    }
                } else {
                    value = field.value;
                }

                if (trim(value).length == 0) {

                    if (i == 0) {
                        focusField = field;
                    }
                    fields[i++] = oRequired[x][1];
                    isValid = false;
                }
            } else if (field.type == "select-multiple") { 
                var numOptions = field.options.length;
                lastSelected=-1;
                for(loop=numOptions-1;loop>=0;loop--) {
                    if(field.options[loop].selected) {
                        lastSelected = loop;
                        value = field.options[loop].value;
                        break;
                    }
                }
                if(lastSelected < 0 || trim(value).length == 0) {
                    if(i == 0) {
                        focusField = field;
                    }
                    fields[i++] = oRequired[x][1];
                    isValid=false;
                }
            } else if ((field.length > 0) && (field[0].type == 'radio' || field[0].type == 'checkbox')) {
                isChecked=-1;
                for (loop=0;loop < field.length;loop++) {
                    if (field[loop].checked) {
                        isChecked=loop;
                        break; // only one needs to be checked
                    }
                }
                if (isChecked < 0) {
                    if (i == 0) {
                        focusField = field[0];
                    }
                    fields[i++] = oRequired[x][1];
                    isValid=false;
                }
            }
        }
        if (fields.length > 0) {
           focusField.focus();
           alert(fields.join('\n'));
        }
        return isValid;
    }
    
    // Trim whitespace from left and right sides of s.
    function trim(s) {
        return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
    }


//End --> 
</script>


</form></td>
            <td width="10" align="right" valign="bottom" bgcolor="#FFFFFF" style="background-image: url(images/tabl_right_bg.gif); background-position:right; background-repeat:repeat-y;"><img src="images/right_corn_bot.gif" width="13" height="361" /></td>
          </tr>
          <tr>
            <td width="10" height="10" align="left" valign="bottom"><img src="images/corn_left_bot.gif" width="13" height="17" /></td>
            <td height="10" valign="bottom" bgcolor="#FFFFFF" style="background-image: url(images/tabl_bot_bg.gif); background-position:bottom; background-repeat:repeat-x;"><img src="images/tabl_bot_bg.gif" width="4" height="4" /></td>
            <td width="10" height="10" align="right" valign="bottom"><img src="images/corn_right_bot.gif" width="13" height="17" /></td>
          </tr>
        </table></td>
      </tr>
      <tr>
        <td align="center" class="footer_white">
Copyright © 2006-2009 MPS Technologies Ltd</td>
      </tr>
    </table></td>
  </tr>
</table>
</body>
</div>
</body>
</html>